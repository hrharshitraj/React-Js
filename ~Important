import {useState} from 'react'; // useState -> Hook

const [counter, setCounter] = useState(0);

<button onClick={() => alert('Clicked')}>+</button> -> Once you click on +, an alert will be popped showing Clicked;

<button onClick={() => setCounter((nextCount) => nextCount+1)} >+</button>
<h1>{counter}</h1>   
<button onClick={() => setCounter((prevCount) => prevCount-1)}>-</button>
Now, counter can be incremented as well as decremented.
'onClick' makes it dynamic;

All these changes happens without the web application being reloaded, beauty of React;
Once you click on refresh, counter will be equal to its initial value;


// As you know, this useEffect will be implemented the moment page is reloaded, How would you change the counter to 100 the moment page reloads?
useEffect(() =>  {
  // counter = 100;  // Never Modify State Manually, never mutate the state -> Most important rule in React;
  // By calling the setCounter, you can set the counter to 100 on reloadeing;
  setCounter(100);   // Not be incremented or decremented on clicking, 2nd parameter called dependency array[] is used;
  }, []);
  
